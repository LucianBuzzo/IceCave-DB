# IceCave DB

[![Build Status](https://travis-ci.org/LucianBuzzo/IceCave-DB.svg?branch=master)](https://travis-ci.org/LucianBuzzo/IceCave-DB)
[![npm version](https://badge.fury.io/js/icecave.svg)](http://badge.fury.io/js/icecave)
[![Dependency Status](https://img.shields.io/david/LucianBuzzo/IceCave-DB.svg)](https://david-dm.org/LucianBuzzo/IceCave-DB)

A lightweight flat file storage system for nodejs.

Query using [JSON schema](https://json-schema.org/) and update using [JSON patch](https://tools.ietf.org/html/rfc6902).


IceCave is designed for use in applications where relatively small amounts of
data (less than 10000 elements) need to be stored persistently and a dedicated
external database service is impractical or overkill.
IceCave stores data in-memory and periodically dumps it's contents to
a JSON file. On startup it will read this file location and load any data found
there.

# Usage

Below is an example how to use IceCave DB:

```js
const IceCave = require('icecave');

// Create a new storage instance that will be written to the directory './data-directory'
const db = new IceCave({
  directory: __dirname + '/data-directory',
})

// Add elements to the database
db.insert({ id: 1, name: 'Abra' })
db.insert({ id: 2, name: 'Bulbasaur' })
db.insert({ id: 3, name: 'Caterpie' })

// Find an element
const user = db.query({
  type: 'object',
  properties: {
    id: {
      type: 'string',
      const: 2
    }
  }
}) // --> { id: 2, name: 'Bulbasaur' }

// Update an element
const user = db.update({
  type: 'object',
  properties: {
    id: {
      type: 'string',
      const: 2
    }
  }
}, [
  { op: 'replace', path: '/name', value: 'Beedrill' },
  { op: 'add', path: '/type', value: [ 'bug', 'poison' ] }
]) // --> { id: 2, name: 'Beedrill', type: [ 'bug', 'poison' ] }

// Delete an element
const user = db.delete({
  type: 'object',
  properties: {
    id: {
      type: 'string',
      const: 3
    }
  }
})
```

# Documentation

## IceCave instance

{{#class name="IceCave"}}
{{>body~}}
{{>member-index~}}
{{>separator~}}
{{>members~}}
{{/class}}

